// Copyright 2017-2020 Matthew D. Michelotti
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Traits related to asset enums that are generated by "gate_build".
//!
//! The user is not expected to implement these traits themselves directly.
//! Rather, the generated code from "gate_build" will implement these traits.
//! Gate build will generate four enums: `SpriteId`, `MusicId`, and `SoundId`,
//! that implement `IdU16`.
//! It will also generate a collection type `AssetId` that implements `AppAssetId`.

/// A value that can be converted to a `u16` ID, implemented by asset enums.
pub trait IdU16: Sized {
    /// Converts self to a `u16` ID.
    ///
    /// This will be value between `0` (inclusive) and `Self::count()` (exclusive).
    fn id_u16(self) -> u16;

    /// Returns the number of IDs in this enum.
    fn count() -> u16;

    /// Converts a `u16` ID to the asset enum value, or `None` if `id >= Self::count()`
    fn from_u16(id: u16) -> Option<Self>;
}

/// A convenience collection of all asset ID types.
pub trait AppAssetId {
    /// Sprite asset enum
    type Sprite: IdU16;
    /// Music asset enum
    type Music: IdU16;
    /// Sound asset enum
    type Sound: IdU16;
}
